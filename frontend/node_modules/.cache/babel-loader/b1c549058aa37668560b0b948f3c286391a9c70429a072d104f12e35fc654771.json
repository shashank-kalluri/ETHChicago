{"ast":null,"code":"var _jsxFileName = \"/Users/shashankkalluri/Documents/Blockchain/ethchicago/frontend/src/dashboard/Risk.js\";\nimport * as React from 'react';\nimport Link from '@mui/material/Link';\nimport Typography from '@mui/material/Typography';\nimport Title from './Title';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction preventDefault(event) {\n  event.preventDefault();\n}\nconst formatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD'\n\n  // These options are needed to round to whole numbers if that's what you want.\n  //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n  //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\n});\n\nexport default function Risk({\n  data\n}) {\n  if (!data) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: \"Risk vs Returns Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      component: \"p\",\n      variant: \"h4\",\n      children: \"Sharpe Ratio: \" + Math.round(data.sharpe * 100) / 100\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      color: \"text.secondary\",\n      sx: {\n        flex: 1\n      },\n      children: [\"on \", new Date().toJSON().slice(0, 10)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Initial value: \", formatter.format(data.initial)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n_c = Risk;\nvar _c;\n$RefreshReg$(_c, \"Risk\");","map":{"version":3,"names":["React","Link","Typography","Title","jsxDEV","_jsxDEV","preventDefault","event","formatter","Intl","NumberFormat","style","currency","Risk","data","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","children","component","variant","Math","round","sharpe","color","sx","flex","Date","toJSON","slice","format","initial","_c","$RefreshReg$"],"sources":["/Users/shashankkalluri/Documents/Blockchain/ethchicago/frontend/src/dashboard/Risk.js"],"sourcesContent":["import * as React from 'react';\nimport Link from '@mui/material/Link';\nimport Typography from '@mui/material/Typography';\nimport Title from './Title';\n\nfunction preventDefault(event) {\n  event.preventDefault();\n}\n\nconst formatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n\n  // These options are needed to round to whole numbers if that's what you want.\n  //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n  //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\n});\n\nexport default function Risk({ data }) {\n  if (!data) {\n    return <div />;\n  }\n  return (\n    <React.Fragment>\n      <Title>Risk vs Returns Analysis</Title>\n      <Typography component=\"p\" variant=\"h4\">\n        {\"Sharpe Ratio: \" + Math.round(data.sharpe * 100) / 100}\n      </Typography>\n      <Typography color=\"text.secondary\" sx={{ flex: 1 }}>\n        on {new Date().toJSON().slice(0, 10)}\n      </Typography>\n      <div>\n        Initial value: {formatter.format(data.initial)}\n      </div>\n    </React.Fragment>\n  );\n}\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,KAAK,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,SAASC,cAAcA,CAACC,KAAK,EAAE;EAC7BA,KAAK,CAACD,cAAc,CAAC,CAAC;AACxB;AAEA,MAAME,SAAS,GAAG,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;EAC/CC,KAAK,EAAE,UAAU;EACjBC,QAAQ,EAAE;;EAEV;EACA;EACA;AACF,CAAC,CAAC;;AAEF,eAAe,SAASC,IAAIA,CAAC;EAAEC;AAAK,CAAC,EAAE;EACrC,IAAI,CAACA,IAAI,EAAE;IACT,oBAAOT,OAAA;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAChB;EACA,oBACEb,OAAA,CAACL,KAAK,CAACmB,QAAQ;IAAAC,QAAA,gBACbf,OAAA,CAACF,KAAK;MAAAiB,QAAA,EAAC;IAAwB;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACvCb,OAAA,CAACH,UAAU;MAACmB,SAAS,EAAC,GAAG;MAACC,OAAO,EAAC,IAAI;MAAAF,QAAA,EACnC,gBAAgB,GAAGG,IAAI,CAACC,KAAK,CAACV,IAAI,CAACW,MAAM,GAAG,GAAG,CAAC,GAAG;IAAG;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC7C,CAAC,eACbb,OAAA,CAACH,UAAU;MAACwB,KAAK,EAAC,gBAAgB;MAACC,EAAE,EAAE;QAAEC,IAAI,EAAE;MAAE,CAAE;MAAAR,QAAA,GAAC,KAC/C,EAAC,IAAIS,IAAI,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;IAAA;MAAAhB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC,eACbb,OAAA;MAAAe,QAAA,GAAK,iBACY,EAACZ,SAAS,CAACwB,MAAM,CAAClB,IAAI,CAACmB,OAAO,CAAC;IAAA;MAAAlB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACQ,CAAC;AAErB;AAACgB,EAAA,GAlBuBrB,IAAI;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}